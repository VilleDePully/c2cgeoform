<?python import json ?>
<span tal:define="name name|field.name;
                  css_class css_class|field.widget.css_class;
                  oid oid|field.oid;
                  style style|field.widget.style;"
      tal:omit-tag="" i18n:domain="c2cgeoform">
    <input type="hidden" name="${name}" value="${cstruct}" 
           tal:attributes="class string: form-control ${css_class or ''};
                           style style"
           id="${oid}"/>
    <div id="map_${oid}" class="map"></div>
    <style>
      .map {
        height: 400px;
        width: 100%;
      }
    </style>
    <script>
      (function() {
        // Translations
        const controlsDefinition = ${controls_definition}
        controlsDefinition['drawPointTooltip'] = '${_('Draw point')}'
        controlsDefinition['drawLineTooltip'] = '${_('Draw line')}'
        controlsDefinition['drawPolygonTooltip'] = '${_('Draw polygon')}'
        controlsDefinition['modifyTooltip'] = '${_('Modify')}'
        controlsDefinition['clearTooltip'] = '${_('Remove all')}'
        console.log(controlsDefinition)
        c2cgeoform.i18n = {}
        c2cgeoform.i18n['zoomInTipLabel'] = '${_('Zoom In')}'
        c2cgeoform.i18n['zoomOutTipLabel'] = '${_('Zoom Out')}'
        c2cgeoform.i18n['attributionTipLabel'] = '${_('Attributions')}'

        // Defer widget creation
        deform.addCallback('${oid}', function (oid) {
          if (c2cgeoform.exists(oid)) return true
          c2cgeoform.init_form(oid, {
            geojson: '${cstruct}',
            base_layer: ${structure: field.widget.base_layer},
            view: {
              center: ${structure: json.dumps(field.widget.center) },
              zoom: ${structure: json.dumps(field.widget.zoom) },
              fit_max_zoom: ${structure: json.dumps(field.widget.fit_max_zoom) },
            }
          })

        })
      })()
    </script>
</span>
